###
# NGINX main configuration context
###
user  nginx;

worker_processes  auto;

events {
    worker_connections  1024;
}

###
# STREAM BLOCK
###

# stream {
#     # -- 1515 --
#     upstream wazuh_manager_1515 {
#         server ${backendIP}:1515;
#     }
#     server {
#         listen 1515;
#         proxy_pass wazuh_manager_1515;
#     }

#     # -- 1514 --
#     upstream wazuh_manager_1514 {
#         server ${backendIP}:1514;
#     }
#     server {
#         listen 1514;
#         proxy_pass wazuh_manager_1514;
#     }

#     # -- 55000 --
#     upstream wazuh_manager_55000 {
#         server ${backendIP}:55000;
#     }
#     server {
#         listen 55000;
#         proxy_pass wazuh_manager_55000;
#     }
# }

stream {
    # --- SMTP (port 25) ---
    upstream mailcow_smtp {
        # The Postfix container typically listens on port 25 internally
        server postfix-mailcow:25;
    }
    server {
        listen 25;
        proxy_pass mailcow_smtp;
    }

    # --- Submission (port 587) ---
    upstream mailcow_submission {
        server postfix-mailcow:587;
    }
    server {
        listen 587;
        proxy_pass mailcow_submission;
    }

    # --- SMTPS (port 465) ---
    upstream mailcow_smtps {
        server postfix-mailcow:465;
    }
    server {
        listen 465 ssl;
        # If you want to do full TLS termination in the front NGINX for SMTPS,
        # configure ssl_certificate and ssl_certificate_key, or simply do
        # a TCP pass-through. This example shows pass-through with no extra SSL config:
        proxy_pass mailcow_smtps;
    }

    # --- POP3 (port 110) ---
    upstream mailcow_pop3 {
        server dovecot-mailcow:110;
    }
    server {
        listen 110;
        proxy_pass mailcow_pop3;
    }

    # --- POP3S (port 995) ---
    upstream mailcow_pop3s {
        server dovecot-mailcow:995;
    }
    server {
        listen 995 ssl;
        proxy_pass mailcow_pop3s;
    }

    # --- IMAP (port 143) ---
    upstream mailcow_imap {
        server dovecot-mailcow:143;
    }
    server {
        listen 143;
        proxy_pass mailcow_imap;
    }

    # --- IMAPS (port 993) ---
    upstream mailcow_imaps {
        server dovecot-mailcow:993;
    }
    server {
        listen 993 ssl;
        proxy_pass mailcow_imaps;
    }
}

###
# HTTP BLOCK
###

http {
    # Hide NGINX version
    server_tokens off;

    include       mime.types;
    default_type  application/octet-stream;

    # Enable debug logging
    error_log /var/log/nginx/error.log warn;

    # enable access logging 
    access_log /var/log/nginx/access.log;

    ###
    # SERVER BLOCKS
    ###

    #--------------------------------------------------
    # WEB PAGE: ${BASE_DOMAIN}
    #--------------------------------------------------

    # Redirect HTTP → HTTPS
    server {
        listen 80;
        listen [::]:80;
        server_name localhost ${HOSTNAME} ${BASE_DOMAIN}; # or _ for any host
        return 301 https://$host$request_uri;
    }

    server {
         listen 443 ssl http2;
         listen [::]:443 ssl http2;
         server_name localhost ${HOSTNAME} ${BASE_DOMAIN}; # or _ for any host

        ssl_certificate /etc/nginx/certs/fullchain.pem;
        ssl_certificate_key /etc/nginx/certs/privkey.pem;

        location / {
            proxy_pass http://${backendIP}:8081;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    # #--------------------------------------------------
    # # WAZUH WEB UI: wazuh.${BASE_DOMAIN}
    # #--------------------------------------------------

    # server {
    #     listen 80;
    #     listen [::]:80;
    #     server_name localhost ${HOSTNAME} wazuh.${BASE_DOMAIN};
    #     return 301 https://$host$request_uri;
    # }

    # server {
    #     listen 443 ssl http2;
    #     listen [::]:443 ssl http2;
    #     server_name localhost ${HOSTNAME} wazuh.${BASE_DOMAIN};

    #     ssl_certificate /etc/nginx/certs/wazuh.fullchain.pem;
    #     ssl_certificate_key /etc/nginx/certs/wazuh.privkey.pem;
    #     location / {
    #         proxy_pass https://${backendIP}:5601/;
    #         proxy_set_header Host $host;
    #         proxy_set_header X-Real-IP $remote_addr;
    #         proxy_set_header X-Forwarded-Proto $scheme;
    #     }
    # }

    # #--------------------------------------------------
    # # ERPNext WEB UI: erp.${BASE_DOMAIN}
    # #--------------------------------------------------

    # Redirect HTTP traffic to HTTPS for ERPNext
    server {
        listen 80;
        listen [::]:80;
        server_name localhost ${HOSTNAME} erp.${BASE_DOMAIN};
        return 301 https://$host$request_uri; # Redirect to HTTPS
    }

    # HTTPS for ERPNext
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name localhost ${HOSTNAME} erp.${BASE_DOMAIN};

        # SSL certificates
        ssl_certificate /etc/nginx/certs/erp.fullchain.pem;
        ssl_certificate_key /etc/nginx/certs/erp.privkey.pem;

        # Increase buffer sizes (optional, for large responses)
        client_max_body_size 50M; # Adjust as needed
        proxy_buffer_size 128k;
        proxy_buffers 4 256k;
        proxy_busy_buffers_size 256k;

        # Proxy settings for ERPNext
        location / {
            proxy_pass http://${backendIP}:8080;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Handle WebSocket connections
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }
    }

    #--------------------------------------------------
    # JENKINS WEB UI: jenkins.${BASE_DOMAIN}
    #--------------------------------------------------

    # Redirect HTTP traffic to HTTPS for Jenkins
    server {
        listen 80;
        listen [::]:80;
        server_name localhost ${HOSTNAME} jenkins.${BASE_DOMAIN};
        return 301 https://$host$request_uri; # Redirect to HTTPS
    }

    # HTTPS for Jenkins
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name localhost ${HOSTNAME} jenkins.${BASE_DOMAIN};

        # SSL certificates
        ssl_certificate /etc/nginx/certs/jenkins.fullchain.pem;
        ssl_certificate_key /etc/nginx/certs/jenkins.privkey.pem;

        # Increase buffer sizes (optional, for large responses)
        client_max_body_size 50M; # Adjust as needed
        proxy_buffer_size 128k;
        proxy_buffers 4 256k;
        proxy_busy_buffers_size 256k;

        # Proxy settings for Jenkins
        location / {
            proxy_pass http://${backendIP}:9080;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Handle WebSocket connections
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }
    }


    #--------------------------------------------------
    # MAILCOW PAGE: mail.${BASE_DOMAIN}
    #--------------------------------------------------
    # --- Server block for HTTP (80) ---
    server {
        listen 80;
        listen [::]:80;
        server_name localhost ${HOSTNAME} mail.${BASE_DOMAIN};
        return 301 https://$host$request_uri; # Redirect everything else to HTTPS
    }

    # --- Server block for HTTPS (443) ---
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name localhost ${HOSTNAME} mail.${BASE_DOMAIN};

        # SSL certs if you're terminating TLS here
        ssl_certificate /etc/nginx/certs/mail.fullchain.pem;
        ssl_certificate_key /etc/nginx/certs/mail.privkey.pem;
        
        # Basic SSL config (adapt cipher suites, etc. to your needs)
        ssl_protocols        TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers on;

        # Forward all HTTPS traffic to Mailcow’s internal Nginx (on port  12443)
        location / {
            proxy_pass https://${backendIP}:12443
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

        }
    }

}
