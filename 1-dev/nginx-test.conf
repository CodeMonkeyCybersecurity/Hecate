# nginx.conf
worker_processes  auto;

events {
    worker_connections  1024;
}



###
# STREAM BLOCK
###

# stream {            # Uncomment this if using any applications which have 'stream' blocks

    #--------------------------------------------------
    # WAZUH STREAM
    #--------------------------------------------------
    #     upstream wazuh_manager_1515 {
    #         server 100.105.31.114:1515;
    #     }
    #     server {
    #         listen 1515;
    #         proxy_pass wazuh_manager_1515;
    #     }

    #     upstream wazuh_manager_1514 {
    #         server 100.105.31.114:1514;
    #     }
    #     server {
    #         listen 1514;
    #         proxy_pass wazuh_manager_1514;
    #     }
    # }


    #--------------------------------------------------
    # MAILCOW STREAM
    #--------------------------------------------------

###
# HTTP BLOCK for Web UI
###

http {
    include       mime.types;
    default_type  application/octet-stream;

    # Enable debug logging
    error_log /var/log/nginx/error.log debug;

    # enable access logging 
    access_log /var/log/nginx/access.log;

    #--------------------------------------------------
    # MAIN WEBSITE: domain.com
    #--------------------------------------------------
    # Redirect HTTP â†’ HTTPS
    server {
        listen 80 default_server;
        server_name ${SERVER_NAMES}; # or _ for any host

        # Redirect all HTTP traffic to HTTPS
        return 301 https://$host$request_uri;
    }

    # The HTTPS server for domain.com
    server {
        listen 443 ssl default_server;
        server_name ${SERVER_NAMES}; # or _ for any host

        ssl_certificate /etc/nginx/certs/fullchain.pem;
        ssl_certificate_key /etc/nginx/certs/privkey.pem;

        location / {
            proxy_pass http://${BACKEND_IP}:${BACKEND_PORT};
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
    

    #--------------------------------------------------
    # WAZUH: wazuh.domain.com
    #--------------------------------------------------
    server {
        listen 80;
        server_name wazuh.chickenj0.cloud;
        return 301 https://$host$request_uri;
    }

    server {
        listen 443 ssl;
        server_name WAZUH_SERVER_NAMES;
        ssl_certificate /etc/nginx/certs/wazuh.fullchain.pem;
        ssl_certificate_key /etc/nginx/certs/wazuh.privkey.pem;
        location / {
            proxy_pass https://${WAZUH_BACKEND_IP}:${WAZUH_BACKEND_PORT};
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    
    #--------------------------------------------------
    # MAILCOW WEB UI: mail.domain.com
    #--------------------------------------------------
    server {
        listen 80 default_server;
        server_name ${SERVER_NAMES};

        # Redirect all HTTP traffic to HTTPS
        return 301 https://$host$request_uri;
    }

    server {
        listen 443 ssl default_server;
        server_name ${SERVER_NAMES};

        ssl_certificate /etc/nginx/certs/fullchain.pem;
        ssl_certificate_key /etc/nginx/certs/privkey.pem;

        location / {
            proxy_pass http://${BACKEND_IP}:${BACKEND_PORT};
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    
    #--------------------------------------------------
    # MATTERMOST: mattermost.domain.com
    #--------------------------------------------------
    server {
        listen 80 default_server;
        server_name ${SERVER_NAMES};

        # Redirect all HTTP traffic to HTTPS
        return 301 https://$host$request_uri;
    }

    server {
        listen 443 ssl default_server;
        server_name ${SERVER_NAMES};

        ssl_certificate /etc/nginx/certs/fullchain.pem;
        ssl_certificate_key /etc/nginx/certs/privkey.pem;

        location / {
            proxy_pass http://${BACKEND_IP}:${BACKEND_PORT};
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    
    #--------------------------------------------------
    # NEXTCLOUD: nextcloud.domain.com
    #--------------------------------------------------
    server {
        listen 80 default_server;
        server_name ${SERVER_NAMES};

        # Redirect all HTTP traffic to HTTPS
        return 301 https://$host$request_uri;
    }

    server {
        listen 443 ssl default_server;
        server_name ${SERVER_NAMES};

        ssl_certificate /etc/nginx/certs/fullchain.pem;
        ssl_certificate_key /etc/nginx/certs/privkey.pem;

        location / {
            proxy_pass http://${BACKEND_IP}:${BACKEND_PORT};
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    
    #--------------------------------------------------
    # JENKINS: jenkins.domain.com
    #--------------------------------------------------
    server {
        listen 80 default_server;
        server_name ${SERVER_NAMES};

        # Redirect all HTTP traffic to HTTPS
        return 301 https://$host$request_uri;
    }

    server {
        listen 443 ssl default_server;
        server_name ${SERVER_NAMES};

        ssl_certificate /etc/nginx/certs/fullchain.pem;
        ssl_certificate_key /etc/nginx/certs/privkey.pem;

        location / {
            proxy_pass http://${BACKEND_IP}:${BACKEND_PORT};
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    
    #--------------------------------------------------
    # GRAFANA: grafana.domain.com
    #--------------------------------------------------
    server {
        listen 80 default_server;
        server_name ${SERVER_NAMES};

        # Redirect all HTTP traffic to HTTPS
        return 301 https://$host$request_uri;
    }

    server {
        listen 443 ssl default_server;
        server_name ${SERVER_NAMES};

        ssl_certificate /etc/nginx/certs/fullchain.pem;
        ssl_certificate_key /etc/nginx/certs/privkey.pem;

        location / {
            proxy_pass http://${BACKEND_IP}:${BACKEND_PORT};
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    
    #--------------------------------------------------
    # ELK STACK: elk.domain.com
    #--------------------------------------------------
    server {
        listen 80 default_server;
        server_name ${SERVER_NAMES};

        # Redirect all HTTP traffic to HTTPS
        return 301 https://$host$request_uri;
    }

    server {
        listen 443 ssl default_server;
        server_name ${SERVER_NAMES};

        ssl_certificate /etc/nginx/certs/fullchain.pem;
        ssl_certificate_key /etc/nginx/certs/privkey.pem;

        location / {
            proxy_pass http://${BACKEND_IP}:${BACKEND_PORT};
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    
    #--------------------------------------------------
    # OPENSTACK: oc.domain.com
    #--------------------------------------------------
    server {
        listen 80 default_server;
        server_name ${SERVER_NAMES};

        # Redirect all HTTP traffic to HTTPS
        return 301 https://$host$request_uri;
    }

    server {
        listen 443 ssl default_server;
        server_name ${SERVER_NAMES};

        ssl_certificate /etc/nginx/certs/fullchain.pem;
        ssl_certificate_key /etc/nginx/certs/privkey.pem;

        location / {
            proxy_pass http://${BACKEND_IP}:${BACKEND_PORT};
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    
    #--------------------------------------------------
    # NEBULA: nebula.domain.com
    #--------------------------------------------------
    server {
        listen 80 default_server;
        server_name ${SERVER_NAMES};

        # Redirect all HTTP traffic to HTTPS
        return 301 https://$host$request_uri;
    }

    server {
        listen 443 ssl default_server;
        server_name ${SERVER_NAMES};

        ssl_certificate /etc/nginx/certs/fullchain.pem;
        ssl_certificate_key /etc/nginx/certs/privkey.pem;

        location / {
            proxy_pass http://${BACKEND_IP}:${BACKEND_PORT};
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    
    #--------------------------------------------------
    # SECURITY ONION: soc.domain.com
    #--------------------------------------------------
    server {
        listen 80 default_server;
        server_name ${SERVER_NAMES};

        # Redirect all HTTP traffic to HTTPS
        return 301 https://$host$request_uri;
    }

    server {
        listen 443 ssl default_server;
        server_name ${SERVER_NAMES};

        ssl_certificate /etc/nginx/certs/fullchain.pem;
        ssl_certificate_key /etc/nginx/certs/privkey.pem;

        location / {
            proxy_pass http://${BACKEND_IP}:${BACKEND_PORT};
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    
    #--------------------------------------------------
    # RESTIC: restic.domain.com
    #--------------------------------------------------
    server {
        listen 80 default_server;
        server_name ${SERVER_NAMES};

        # Redirect all HTTP traffic to HTTPS
        return 301 https://$host$request_uri;
    }

    server {
        listen 443 ssl default_server;
        server_name ${SERVER_NAMES};

        ssl_certificate /etc/nginx/certs/fullchain.pem;
        ssl_certificate_key /etc/nginx/certs/privkey.pem;

        location / {
            proxy_pass http://${BACKEND_IP}:${BACKEND_PORT};
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    
    #--------------------------------------------------
    # KEYCLOAK: iam.domain.com
    #--------------------------------------------------
    server {
        listen 80 default_server;
        server_name ${SERVER_NAMES};

        # Redirect all HTTP traffic to HTTPS
        return 301 https://$host$request_uri;
    }

    server {
        listen 443 ssl default_server;
        server_name ${SERVER_NAMES};

        ssl_certificate /etc/nginx/certs/fullchain.pem;
        ssl_certificate_key /etc/nginx/certs/privkey.pem;

        location / {
            proxy_pass http://${BACKEND_IP}:${BACKEND_PORT};
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    
    #--------------------------------------------------
    # 123) EXAMPLE: example.domain.com
    #-------------------------------------------------- 

}

    
